problemas do spring normal:

configuração de beans em arquivos xml;
dispatcher servelet e view resolver em web.xml
setup manual de banco de dados;
Ou seja muito tempo gasto em configuração

Spring boot --> criando em 2012 --> facilitar do setup;
Spring initializr --> facilitar de criar um projeto
Starters --> engloba várias dependencias, agrupadas, agora facilita muito;
Application.properties --> configurações uteis -> tudo para facilitar a agregação de valor no fonte;

AutoConfiguration -->

Starters: dependências simplificadas e auto configuráveis;

o starter já vai para outro pom, para o autoconfigure;

@Configuration --> para o spring identificar que é uma classe de configuração do spring.

FatJar - UberJar

Dependencia de um container web ou servidor de aplicação.

Complexidade grande para configuração;

Gerenciamento manual de configurações;

FatJar / UberJar --> vantagem -->

Artefato do projeto pronto para execução

--> Container web embutido na geração e execução(Padrão Tomcat).

--> Se necessário outros container são opcionais

--> Dependencias principais do projeto embarcado;

Emgloba todas as dependencias

mvn package && java -jar target/spring-boot-example-0.1.0.jar --> pronto já sobe tudo de maneira muito mais fácil, inclusive numa maquina de produção
se necessário só trocar o packaging pra war

subir com jar -->
mvn clean package
cd target
java -jar springboot.jar dessa maneira já sobe a aplicação.


Subir como war -->

mvn clean package
entrar na target tem o war gerado....
mv target/springboot.war para apache-tomcat-9/webapps
cd apache-tomcat-...
./startup.sh --> dessa forma sobe o tomcat 
localhost:8080/springboot/ pronto chamará o que foi feito antes;

Profiles -->
	Configurações com arquivos
Importância dos profiles
	Mutiplos ambientes...
	Execução de testes unitários em abiente local;
	Suíte de testes completas em ambiente de teste;
	Simulação do ambiente real em staging;
	Deploy simplificado em produção;
Configuração próprias para cada ambiente;
Ambientes com sua configuração dev, production
application.properties;
application-dev.properties;
application-release.properties;

Exemplo via fonte:
@Configuration
@ConfigurationProperties("spring.datasource")

public class DBConfiguaration {

atributos... driverClassName, url, username, password assim por diante.

para exibir os profiles quando determinado profile ativo, exemplo para dev...

@Profile("dev")
@Bean
public String devDataBaseConnection() {
	System.out.pritln(driverClassName);...
}


Exemplo no git --> https://github.com/vinicionagel/springboot-multiprofile	

Diferença entre .properties e .YML
.properties
basic.value=true
basic.message=Dynamic message
basic.number=100

.YML (vantagem simplifica a leitura, além da escrita ficar mais bem estruturada.)
basic:
	value: true
	message: Dynamic...
	number: 100

Uso de command line:
Pode sobreescrever propriedades do arquivo de configuração na linha de comando
Sobreescrever propriedades definidas no arquivo de configuração padrão

Como injetar váriaveis de ambiente no spring.

@Value("${NOME_VARIAVEL_AMBIENTE}")
ENV_DB_URL:NENHUMA se não encontra sai nenhuma
@Value("${ENV_DB_URL:NENHUMA}")

