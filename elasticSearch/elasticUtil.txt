No entanto, Elasticsearch é muito mais do que apenas Lucene e muito mais do que “apenas” pesquisa de texto completo. Também pode ser descrito da seguinte forma:

- Um armazenamento de documentos em tempo real distribuído onde cada campo é indexado e pesquisável

- Um mecanismo de pesquisa distribuído com análises em tempo real

- Capaz de escalar para centenas de servidores e petabytes de dados estruturados e não estruturados


Elasticsearch é orientado a documentos , o que significaque armazena objetos ou documentos inteiros. Ele não apenas os armazena, mas também indexa o conteúdo de cada documento para torná-los pesquisáveis.


--Métodos simples de consulta:

Para fazer isso, usaremos um método de pesquisa leve que é fácil de usar na linha de comando. Este método é frequentemente referido comouma pesquisa de string de consulta , já que passamos a pesquisa como um parâmetro de string de consulta de URL:

GET /megacorp/employee/_search?q=last_name:Smith

Elasticsearch fornece uma linguagem de consulta rica e flexível chamada DSL de consulta , que nos permite construir consultas muito mais complexas e robustas.

--Consulta com dsl

O idioma específico do domínio (DSL) éespecificado usando um corpo de solicitação JSON. Podemos representar a pesquisa anterior para todos os Smiths da seguinte forma:

GET /megacorp/employee/_search
{
    "query" : {
        "match" : {
            "last_name" : "Smith"
        }
    }
}

-- Subir elastic no docker --

docker run -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:6.8.19

----

Vamos complicar um pouco a pesquisa. Ainda queremos encontrar todos os funcionários com o sobrenome Smith, mas queremos apenas funcionários com mais de 30 anos.
Nossa consulta mudará um pouco para acomodar um filtro , que nos permite executar pesquisas estruturadas com eficiência:

{
    "query" : {
        "filtered" : {
            "filter" : {
                "range" : {
                    "age" : { "gt" : 30 } 1
                }
            },
            "query" : {
                "match" : {
                    "last_name" : "smith" 2
                }
            }
        }
    }
}

 -- Match trata parecido por exemplo buscar que gosta de escalada:

{
"query" : {
        "match" : {
            "about" : "rock climbing"
        }
    }
}

Irá retornar quem curte rock tbm... para contornarmos isso é preciso buscar a palavra igual por meio do:

"match_phrase" : {
            "about" : "rock climbing"
        }


-- Destacando nossas pesquisas --



{
  "query" : {
    "match_phrase" : {
      "about" : "rock climbing"
    }
  },
  "highlight": {
    "fields" : {
      "about" : {}
    }
  }
}

Dessa forma vai trazer o le contém um trecho de texto do aboutcampo com as palavras correspondentes embrulhadas em <em></em> tags HTML.

--Analytics

Elasticsearch tem uma funcionalidade chamada agregações , quepermitem que você gere análises sofisticadas sobre seus dados.
É semelhante ao GROUP BY SQL, mas muito mais poderoso.



Essas agregações não são pré-calculadas; eles são gerados instantaneamente a partir dos documentos que correspondem à consulta atual


--Natureza distribuida

Embora nosso tutorial tenha dado exemplos de como usar o Elasticsearch, ele não tocou na mecânica.
Elasticsearch é distribuído por natureza e foi projetado para ocultar a complexidade que vem com a distribuição.

Elasticsearch se esforça para esconder a complexidade dos sistemas distribuídos.
Aqui estão algumas das operações que acontecem automaticamente nos bastidores:

Capítulo 3. Entrada de Dados, Saída de Dados

Elasticsearch é um armazenamento de documentos distribuído .Ele pode armazenar e recuperar estruturas de dados complexas - serializadas como documentos JSON - em tempo real .
Em outras palavras, assim que um documento é armazenado no Elasticsearch, ele pode ser recuperado de qualquer nó do cluster.

No Elasticsearch, todos os dados em cada campo são indexados por padrão .Ou seja, cada campo tem um índice invertido dedicado para recuperação rápida.

Um documento não consiste apenas em seus dados.Ele também tem metadados -informações sobre o documento.
Os três elementos de metadados necessários são os seguintes:

_index
Onde o documento mora

_type
A classe de objeto que o documento representa

_id
O identificador único do documento

Nome do índice: Este nome deve estar em minúsculas, não pode começar com sublinhado e não pode conter vírgulas.
Vamos usar websitecomo nosso nome de índice.

Por exemplo, se nosso índice for chamado website, nosso tipo for chamado bloge escolhermos o ID 123, a solicitação de índice terá a seguinte aparência:

PUT /website/blog/123
{
  "title": "My first blog entry",
  "text":  "Just trying this out...",
  "date":  "2014/01/01"
}


IDs de geração automática
Se nossos dados não tiverem um ID natural, podemos deixar o Elasticsearch gerar um para nós automaticamente. A estrutura da solicitação muda:
em vez de usar o PUT verbo ( “guardar este documento nesta URL”), usamos o POSTverbo ( “guardar este documento sob este URL”).

Exemplo:

POST /website/blog/
{
  "title": "My second blog entry",
  "text":  "Still trying this out...",
  "date":  "2014/01/01"
}

Recuperando um Documento:

GET / site / blog / 123? pretty

Adicionando prettyaos parâmetros de string de consulta para qualquer solicitação,
como no exemplo anterior, faz com que Elasticsearch imprima bem oResposta JSON para torná-lo mais legível.

Recuperando Parte de um Documento:

Ou se quiser apenas o _sourcecampo sem metadados, você pode usar o _sourceendpoint.

GET / website / blog / 123 / _source

Verificar se existe um documento

Se tudo o que você deseja fazer é verificar se um documento existe...

curl -i -XHEAD http://localhost:9200/website/blog/123

retorna um 200 se assim o doc existir, se não existir retorna

---------------Atualizando um documento inteiro---------------

Os documentos no Elasticsearch são imutáveis ; não podemos mudá-los.Em vez disso, se precisarmos atualizar um documento existente,
nós o reindexamos ou substituímos,que podemos fazer usando a mesma index.

Exemplo atualização

PUT /website/blog/123
{
  "title": "My first blog entry",
  "text":  "I am starting to get the hang of this...",
  "date":  "2014/01/02"
}


Internamente, o Elasticsearch marcou o documento antigo como excluído e adicionou um documento inteiramente novo.
A versão antiga do documento não desaparece imediatamente, embora você não consiga acessá-la.
O Elasticsearch limpa os documentos excluídos em segundo plano à medida que você continua a indexar mais dados.

---------------Criando um Novo Documento---------------

No entanto, se já temos um _idque queremos usar, então temos de dizer ElasticSearch que ele deve aceitar o nosso pedido índice apenas se um documento com o mesmo _index, _typee _idainda não existir.

Exemplo de chamada:

PUT /website/blog/123?op_type=create
{ ... }

OU

PUT /website/blog/123/_create
{ ... }

Caso existir retorna um 409

{
  "error" : "DocumentAlreadyExistsException[[website][4] [blog][123]:
             document already exists]",
  "status" : 409
}


---------------Excluindo um Documento---------------

A sintaxe para excluir um documento segue o mesmo padrão que já vimos, mas usa o DELETE método:

DELETE /website/blog/123







