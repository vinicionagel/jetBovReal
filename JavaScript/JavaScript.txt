VAR - LET E CONST

VAR --> Pode modificar 

LET --> let mais moderna não pode redeclarar

CONST --> Constante;


--Tipagem fraca;

tipagem dinamica;

sem especificar o tipo;

'' ou "" ==> texto livre

typeof diz o tipo da variavel

conselo.log(typeof a)

Number

mesmo estando 2.0 é considerado um inteiro;
Há várias funcoes ao tipo Number;
Number com nome maisculo é função
com number minusculo é o nome.

Number --cuidados: 

pode se dividir direto string para numero exemplo:

console.log('10'/2)

Cuidado com algo como console.log('10'+2);

Exemplo template String:

const up = texto => texto.toUpperCase();

console.log(`dasdsad asad asd ${cod3r} dasdsadas dasdas das ${up(cod3r)}`)

Arrays --> agrupa vários valores como vetor.

Estrutura indexada. Não tem tamanho FIXO. pode ser qualquer tipo.

const valores[];

mesmo que possa ser qualquer tipo, tentar usar o tipo separado!
Indice que não existe = undefiny, sem erro;

valores.pop() --> retira o ultimo valor do array
delete valores[0] --> deleta o elemento na posição X
array é do tipo object;


object:

exemplo básico.

const prod1 = {} --> representa um objeto
pode fazer tudo dynamicamente --> ou seja prod1.nome = 'mario' --> dinamicamente
pode ter algo como 
const prod1 = {}
prod1.tipo = {}
prod1.tipo.nome = 'teste'
exemplo com espaçõ
prod1['Desconto Máximo'] = 0.40;

const prod2 = {
nome = 'teste'
valor = 2.33;
}
para retirar um atributo de um objeto usar o delete produto.preco --> remove o atributo preco

Json é diferente de objeto 

null sem endereço de memória;
Undefined sem valor;
Null usado para tirar o valor de referencia;
gera nullPointer O.O typeeror;
consolo.log(!!produto.preco) --> se for null ou undefined retorna false;


Base da linguagem --> função tudo é função.
Qualquer class Produto{} --> é uma função.
Função em nenhum momento fica explicito se tem return ou não.
bloco de códido nomeada para retulizar;
function imprimirSoma(a, b) { //não precisa de let, nada
	console.log(a + b);
}

Se tiver 2 parametros pode colocar apenas um parametro...

É possível armazenar o valor em uma constante


VAR mesmo que dentro de um bloco de código que não seja uma função ela está visivel fora. 	
Só tera 2 escopos possiveis;
Se for dentro de função fica vísivel só lá.
Em ambiente web tudo fica dentro do window --> se declarar um var ficaria disponivel no windows, ou seja, se sobreescrever muda o valor;

let --> tem escopo de bloco, somente dentro do bloco, mais safe, sempre no menor escopo.
em for também melhor usar let.

hosting --> no var ele içar o valor; com let não existe o hosting;

contexto léxico ==> em que local fisica está definido no seu código o par nome valor;

Uma função é um contexto local, se uma variável estiver fora ainda consegue alcançar;

Contexto diferentes, sempre no mais restrito para o mais aberto;

Objetos são grupos aninhados de chave valor;


Destruction: tirar de dentro de uma estrutura(objeto) atributos exemplo:



const pessoa = {
    nome: 'Ana',
    idade: 5,
    endereco: {
        logradouro : 'Rua ABC',
        numero: 100
    }
}
console.log(pessoa)
const {nome, idade} = pessoa //retirar vários atributos de dentro de um objeto
console.log(nome, idade);



const pessoa = {
    nome: 'Ana',
    idade: 5,
    endereco: {
        logradouro : 'Rua ABC',
        numero: 100
    }
}
console.log(pessoa)
const {nome, idade} = pessoa //retirar vários atributos de dentro de um objeto
console.log(nome, idade);


const {nome: n, idade: i} = pessoa //retirar vários atributos de dentro de um objeto

console.log(n, i)

const {sobrenome = 'batata', idade: h} = pessoa //retirar vários atributos de dentro de um objeto
console.log(sobrenome, h)


CUIDADO COM Objetos aninhados --> pode ocorrer problema;

Muito parecido com arrays:

const [n1, ,n2, , n4] = [10,2,4]
console.log(n1,n2,n4)


Operadores lógicos:

> < sempre vai retornar true ou false;

Operadores '1' == 1 compara valores não se são do mesmo tipo ou seja retorna true
           '1' === 1 compara tipo e valores false
           '3' != 3 não usa em consideração o tipo false
           '3' !== 3 um é tipo number e outro texto então vai dar true  
new Date(0) --> 1970... data de referencia;

const d1 = new Date(0);
const d2 = new Date(0);
console.log('09', d1 === d2) -> vai dar false pois são do mesmo tipo, mais endereço de memoria diferente
console.log('09', d1 === d2) -> vai dar false pois independendo do tipo, o endereço de memoria diferente

geralmente se usa os === pq você compara o tipo junto, cuidado****;







